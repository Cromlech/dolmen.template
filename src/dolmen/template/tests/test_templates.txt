Chameleon Zope page templates
=============================

Chameleon provides support for Zope page templates.

Chameleon page templates differ from standard Zope page templates in a
few aspects, most notably:

* Expressions are parsed in ``Python-mode`` by default. This means,
  instead of ``tal:content="view/value"`` you must use
  ``tal:content="view.value"``. Every occurence of TAL-expressions
  starting with ``python:`` now can be shortened by skipping this
  marker.

* Also genshi-like variable substitutions are supported. For example
  you can write ``${myvar}`` instead of ``tal:content="myvar"``.

Beside this, most rules for regular Zope page templates apply also to
chameleon page templates.

See the `Chameleon`_ page for more information.

.. _Chameleon: http://chameleon.repoze.org/docs/latest/zpt.html


Prerequisites
-------------

    >>> class Mammoth(object):
    ...     __name__ = None


Before we can see the templates in action, we care for correct
registration and set some used variables:

    >>> import os
    >>> from dolmen.template.tests import template_dir

We create a mammoth, which should provide us a bunch of chameleon page
template driven views and put it in the database to setup location
info::

    >>> manfred = Mammoth()
    >>> manfred.__name__ = "manfred"

    >>> class View(object):
    ...
    ...     def __init__(self, context):
    ...         self.context = context

    >>> view = View(manfred)

Simple templates
----------------

TALTemplate offers a base implementation for templates.

    >>> from dolmen.template.components import TALTemplate

We prepared a plain cavepainting view. The template looks like this:

    >>> cavepainting_zpt = os.path.join(template_dir, 'cavepainting.zpt')
    >>> print(open(cavepainting_zpt, 'r').read())
    ... # doctest: +NORMALIZE_WHITESPACE
    <html>
      <body>
        A cave painting.
      </body>
    </html>

    >>> template = TALTemplate(cavepainting_zpt)

The rendered view looks like this:

    >>> print(template.render(view))
    ... #doctest: +NORMALIZE_WHITESPACE
    <html>
      <body>
        A cave painting.
      </body>
    </html>


Substituting variables
----------------------

A template can access variables defined in its namespace. The namespace
is built upon the `render` call. A variable in the namespace can be 
accessed freely (methods and attributes). By default, the namespace of
the template contains `target_language` and `component`. The value of
the `component` variable is set to the compponent passed as first arg
to the render method.

The ``food`` view demonstrates how to use variable. The raw
template looks like this:

    >>> food_zpt = os.path.join(template_dir, 'food.zpt')
    >>> print(open(food_zpt, 'r').read())
    ... #doctest: +NORMALIZE_WHITESPACE
    <html>
      <body>
        <span tal:define="foo 'a FOO'">
          <span tal:replace="structure component.__class__.__name__" />
          My context is: ${component.context.__class__}
          ${foo}
          <span tal:replace="foo" />
        </span>
      </body>
    </html>

The rendered view looks like this:

    >>> template = TALTemplate(food_zpt)
    >>> print(template.render(view))
    ... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE
    <html>
      <body>
        <span>
          View
          My context is: &lt;class '__main__.Mammoth'&gt;
          a FOO
          a FOO
        </span>
      </body>
    </html>


Inline Templates
----------------

We can also define inline templates like this::

  >>> inline = TALTemplate(
  ...       "<html><body>ME GROK HAS INLINES! ${component.__class__.__name__}"
  ...       "</body></html>", mode='inline')

If we render this view we get:

   >>> print(inline.render(view))
   <html><body>ME GROK HAS INLINES! View</body></html>


Macros
------

With ``dolmen.template`` we can also use macros, although it is a bit
different from regular Zope page templates.

We can define macros like this:

    >>> zpt_file = os.path.join(template_dir, 'macromaster.zpt')
    >>> print(open(zpt_file, 'r').read())
    ... #doctest: +NORMALIZE_WHITESPACE
    <p xmlns:metal="http://xml.zope.org/namespaces/metal"
       metal:define-macro="hello">
      Hello from <b metal:define-slot="name">macro master</b>
    </p>

The defined macro ``hello`` can be rendered in another Chameleon
template with the METAL attribute ``use-macro``.

To refer to a local macro, i.e. a macros defined in the same template,
you can use something like::

  <div metal:use-macro="template.macros['<macro-name>']">
    Replaced by macro
  </div>

where ``<macro-name>`` must be an existing macro name.

    >>> zpt_file = os.path.join(template_dir, 'macrouser.zpt')
    >>> print(open(zpt_file, 'r').read())
    ... #doctest: +NORMALIZE_WHITESPACE
    <html xmlns:metal="http://xml.zope.org/namespaces/metal">
    <body>
      <p metal:define-macro="hello">
        Hi there from macro user!
      </p>
      <div metal:use-macro="template.macros['hello']">
        Fill this
      </div>
    <BLANKLINE>
      <div metal:use-macro="load('macromaster.zpt').macros['hello']">
        <b metal:fill-slot="name">user slot</b>
        Fill this too
      </div>
    </body>
    </html>

When rendered also the slot defined in the master template is filled
by macro user content:

    >>> load = TALTemplate.loader(template_dir)
    >>> template = load('macrouser.zpt')

    >>> print(template.render(view, **{'load': load}))
    ... #doctest: +NORMALIZE_WHITESPACE
    <html>
    <body>
      <p>
        Hi there from macro user!
      </p>
      <p>
        Hi there from macro user!
      </p>
    <BLANKLINE>
    <BLANKLINE>
      <p>
      Hello from <b>user slot</b>
    <BLANKLINE>
    </p>
    </body>
    </html>


Text templates
--------------

Text templates are supported. We have a template that looks like so:

    >>> hunter = os.path.join(template_dir, 'hunter.txt')
    >>> print(open(hunter, 'r').read())
    ... #doctest: +NORMALIZE_WHITESPACE
    ME GROK HUNT ${animal}!

If we render it, all expressions are substituted:

    >>> from dolmen.template.components import Template
    >>> template = Template(hunter)
    >>> template.render(view, **{'animal': u"MAMMOTH"})
    b'ME GROK HUNT MAMMOTH!\n'


Differences from regular Zope page templates
--------------------------------------------

* Macros are referenced differently. See appropriate section above.
* The TALES by default is `python:`.
